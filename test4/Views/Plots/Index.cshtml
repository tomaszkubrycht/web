@model IEnumerable<test4.Models.Pressures>

@{

    ViewData["Title"] = "Index";
}

<h1>Index</h1>


<svg id="my_dataviz"></svg>
@section Scripts {


    <script>

        var data = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
        draw(data);

        function draw(data1) {

            console.log(data1);
            var parseDate = d3.timeParse("%Y-%m-%dT%H:%M:%SZ");
            var maxDate = parseDate(d3.max(data1, function (d) { return d.CreatedOn; }));
            var minDate = parseDate(d3.min(data1, function (d) { return d.CreatedOn; }));
            var maxPressure = d3.max(data1, function (d) { return d.Pressure; });
            var minPressure = d3.min(data1, function (d) { return d.Pressure; });
            console.log(maxDate);
            console.log(minDate);
            console.log(maxPressure);
            console.log(minPressure);
            var margin = { top: 10, right: 40, bottom: 30, left: 30 },
                width = 850 - margin.left - margin.right,
                height = 600 - margin.top - margin.bottom;
            function handleZoom(e) {
                d3.select('svg g')
                    .attr('transform', e.transform);
                console.log("alert");
            }
           

            var svg = d3.select("#my_dataviz")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                // translate this svg element to leave some margin.
                .append("g")
                
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");
                

            var x = d3.scaleTime()
                .domain([minDate, maxDate])         // This is the min and the max of the data: 0 to 100 if percentages
                .range([0, width])
            
            const xAxis = d3.axisBottom()
                .scale(x)
                .ticks(2)
                ;

            var y = d3.scaleLinear()
                .domain([minPressure, maxPressure])
                .range([height, 0]);
            
            svg.append('g')
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis);
            svg.append('g')
                .call(d3.axisLeft(y));
            data1.forEach(function (d) {
                d.CreatedOn = parseDate(d.CreatedOn);
            });

            var focus = svg.append("g");
            var brush = d3.brushX().x(x);
            svg.append("path")
                .datum(data1)
                .attr("stroke", "steelblue")
                .attr("stroke-width", 1.5)
                .attr("fill", "none")
                .attr("d", d3.line()
                    .x(function (d) { return x(d.CreatedOn) })
                    .y(function (d) { return y(d.Pressure) })
            )
            focus.append("path")
                .attr("class", "line")
                .style({
                    "fill": "none",
                    "stroke": "#000",
                    "stroke-width": "2"
                })
                .datum(data1)
                .attr("d", line);

            focus.append("g")
                .attr("class", "x brush")
                .call(brush)
                .selectAll("rect")
                .attr("height", h)
                .style({
                    "fill": "#69f",
                    "fill-opacity": "0.3"
                });
            console.log("alert");
        }</script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
